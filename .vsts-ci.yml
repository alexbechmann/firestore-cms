queue:
  name: Hosted VS2017
  demands: npm

trigger:
- master
- release
- develop

steps:
- task: gittools.gitversion.gitversion-task.GitVersion@3

- task: Docker@0
  displayName: Build an image
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryConnection: 'Docker Hub'
    imageName: 'refractcms/server:$(GitVersion.SemVer)'
    additionalImageTags: |
     $(GitVersion.MajorMinorPatch)-$(GitVersion.PreReleaseLabel)
     $(GitVersion.SemVer)
     $(GitVersion.PreReleaseLabel)
    workingDirectory: 'packages/server'

- task: Npm@1
  inputs:
    command: "install"
    verbose: "false"
    workingDir: "packages/core"

- task: Npm@1
  inputs:
    command: "custom"
    verbose: "false"
    customCommand: "run build"
    workingDir: "packages/core"

- powershell: . 'packages/core/update-package-version.ps1' $(GitVersion.SemVer) 
  displayName: Update package version

- task: Npm@1
  inputs:
    command: "install"
    verbose: "false"
    workingDir: "packages/server"

- task: Npm@1
  inputs:
    command: "custom"
    verbose: "false"
    customCommand: "run build"
    workingDir: "packages/server"

- powershell: . 'packages/server/update-package-version.ps1' $(GitVersion.SemVer) 
  displayName: Update package version

- task: Npm@1
  inputs:
    command: "install"
    verbose: "false"
    workingDir: "docs-app"

- task: Npm@1
  inputs:
    command: "custom"
    verbose: "false"
    customCommand: "run build"
    workingDir: "docs-app"

- task: Docker@0
  displayName: Push an image
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryConnection: 'Docker Hub'
    action: 'Push an image'
    imageName: 'refractcms/server:$(GitVersion.SemVer)'
    additionalImageTags: |
     $(GitVersion.MajorMinorPatch)-$(GitVersion.PreReleaseLabel)
     $(GitVersion.SemVer)
     $(GitVersion.PreReleaseLabel)
    workingDirectory: 'packages/server'
  condition: and(succeeded(), eq(variables['DEPLOY'], 'true'))

- task: Npm@1
  displayName: npm custom
  inputs:
    command: custom
    workingDir: packages/core
    verbose: false
    customCommand: 'publish --access public --tag $(GitVersion.PreReleaseLabel)'
    customEndpoint: npm
    publishEndpoint: npm
    condition: and(succeeded(), eq(variables['DEPLOY'], 'true'))

- task: Npm@1
  displayName: npm custom
  inputs:
    command: custom
    workingDir: packages/server
    verbose: false
    customCommand: 'publish --access public --tag $(GitVersion.PreReleaseLabel)'
    customEndpoint: npm
    publishEndpoint: npm
    condition: and(succeeded(), eq(variables['DEPLOY'], 'true'))

- task: sergeyzwezdin.magic-chunks.magic.chunks.MagicChunks@2
  condition: eq(variables['DEPLOY'], 'true')
  displayName: Config transform - .firebaserc
  inputs:
    sourcePath: 'docs-app/.firebaserc'
    transformations: |
     {
       "projects/default": "$(REACT_APP_FIREBASE_CONFIG_PROJECT_ID)"
     }

- task: Npm@1
  condition: eq(variables['DEPLOY'], 'true')
  inputs:
    command: custom
    verbose: false
    customCommand: 'install firebase-tools -g'

- task: CmdLine@1
  condition: eq(variables['DEPLOY'], 'true')
  inputs:
    filename: 'firebase'
    arguments: 'deploy --token $(FIREBASE_TOKEN)'
    workingFolder: 'docs-app'